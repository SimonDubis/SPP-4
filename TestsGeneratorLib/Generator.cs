using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using TestsGeneratorLib.FileElements;

namespace TestsGeneratorLib
{
    public class Generator
    {
        public Dictionary<string, string> GenerateTests(FileElement fileElement)
        {
            var fileCode = new Dictionary<string, string>();
            foreach (var classInfo in fileElement.Classes)
            {
                var classDeclaration = GenerateClass(classInfo);
                var compilationUnit = SyntaxFactory.CompilationUnit()
                    .AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System")))
                    .AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("NUnit.Framework")))
                    .AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System.Collections.Generic")))
                    .AddMembers(classDeclaration);
                fileCode.Add(classInfo.ClassName + "Test",
                    compilationUnit.NormalizeWhitespace().ToFullString());
            }

            return fileCode;
        }

        private ClassDeclarationSyntax GenerateClass(ClassElement classElement)
        {
            var methods = new List<MethodDeclarationSyntax>();
            methods = GetMethods(classElement);
            return SyntaxFactory.ClassDeclaration(classElement.ClassName + "Test") //указывает, что метод — это метода теста.
                .AddMembers(methods.ToArray())
                .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.AttributeList()
                    .Attributes.Add(SyntaxFactory.Attribute(SyntaxFactory.ParseName("TestFixture"))))); //обозначает класс, содержащий модульные тесты
        }

        public List<MethodDeclarationSyntax> GetMethods(ClassElement classElement)
        {
            List<MethodDeclarationSyntax> methods = new List<MethodDeclarationSyntax>();
            foreach (var methodInfo in classElement.Methods)
            {
                methods.Add(GenerateMethod(methodInfo, classElement.ClassName));
            }
            return methods;
        }

        private MethodDeclarationSyntax GenerateMethod(MethodElement methodElement, string checkedClassVar)
        {
            List<StatementSyntax> body = new List<StatementSyntax>();

            body.Add(SyntaxFactory.ExpressionStatement(
                SyntaxFactory.InvocationExpression(
                        SyntaxFactory.MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            SyntaxFactory.IdentifierName("Assert"),
                            SyntaxFactory.IdentifierName("Fail")))
                    .WithArgumentList(
                        SyntaxFactory.ArgumentList(
                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.LiteralExpression(
                                        SyntaxKind.StringLiteralExpression,
                                        SyntaxFactory.Literal("autogenerated"))))))));

            return SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), methodElement.MethodName)
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.AttributeList().Attributes.Add(SyntaxFactory.Attribute(SyntaxFactory.ParseName("Test")))))
                .WithBody(SyntaxFactory.Block(body)); ;
        }
    }
}